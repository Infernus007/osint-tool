/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedServicesRouteImport } from './routes/_authenticated/services'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedServicesIndexRouteImport } from './routes/_authenticated/services/index'
import { Route as AuthenticatedServicesSocialRouteImport } from './routes/_authenticated/services/social'
import { Route as AuthenticatedServicesNewsRouteImport } from './routes/_authenticated/services/news'
import { Route as AuthenticatedServicesImageRouteImport } from './routes/_authenticated/services/image'
import { Route as AuthenticatedServicesGovernmentRouteImport } from './routes/_authenticated/services/government'
import { Route as AuthenticatedServicesEmailRouteImport } from './routes/_authenticated/services/email'
import { Route as AuthenticatedServicesDarkwebRouteImport } from './routes/_authenticated/services/darkweb'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedServicesRoute = AuthenticatedServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedServicesIndexRoute =
  AuthenticatedServicesIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)
const AuthenticatedServicesSocialRoute =
  AuthenticatedServicesSocialRouteImport.update({
    id: '/social',
    path: '/social',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)
const AuthenticatedServicesNewsRoute =
  AuthenticatedServicesNewsRouteImport.update({
    id: '/news',
    path: '/news',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)
const AuthenticatedServicesImageRoute =
  AuthenticatedServicesImageRouteImport.update({
    id: '/image',
    path: '/image',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)
const AuthenticatedServicesGovernmentRoute =
  AuthenticatedServicesGovernmentRouteImport.update({
    id: '/government',
    path: '/government',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)
const AuthenticatedServicesEmailRoute =
  AuthenticatedServicesEmailRouteImport.update({
    id: '/email',
    path: '/email',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)
const AuthenticatedServicesDarkwebRoute =
  AuthenticatedServicesDarkwebRouteImport.update({
    id: '/darkweb',
    path: '/darkweb',
    getParentRoute: () => AuthenticatedServicesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/services': typeof AuthenticatedServicesRouteWithChildren
  '/services/darkweb': typeof AuthenticatedServicesDarkwebRoute
  '/services/email': typeof AuthenticatedServicesEmailRoute
  '/services/government': typeof AuthenticatedServicesGovernmentRoute
  '/services/image': typeof AuthenticatedServicesImageRoute
  '/services/news': typeof AuthenticatedServicesNewsRoute
  '/services/social': typeof AuthenticatedServicesSocialRoute
  '/services/': typeof AuthenticatedServicesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/services/darkweb': typeof AuthenticatedServicesDarkwebRoute
  '/services/email': typeof AuthenticatedServicesEmailRoute
  '/services/government': typeof AuthenticatedServicesGovernmentRoute
  '/services/image': typeof AuthenticatedServicesImageRoute
  '/services/news': typeof AuthenticatedServicesNewsRoute
  '/services/social': typeof AuthenticatedServicesSocialRoute
  '/services': typeof AuthenticatedServicesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/services': typeof AuthenticatedServicesRouteWithChildren
  '/_authenticated/services/darkweb': typeof AuthenticatedServicesDarkwebRoute
  '/_authenticated/services/email': typeof AuthenticatedServicesEmailRoute
  '/_authenticated/services/government': typeof AuthenticatedServicesGovernmentRoute
  '/_authenticated/services/image': typeof AuthenticatedServicesImageRoute
  '/_authenticated/services/news': typeof AuthenticatedServicesNewsRoute
  '/_authenticated/services/social': typeof AuthenticatedServicesSocialRoute
  '/_authenticated/services/': typeof AuthenticatedServicesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/services'
    | '/services/darkweb'
    | '/services/email'
    | '/services/government'
    | '/services/image'
    | '/services/news'
    | '/services/social'
    | '/services/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/services/darkweb'
    | '/services/email'
    | '/services/government'
    | '/services/image'
    | '/services/news'
    | '/services/social'
    | '/services'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/services'
    | '/_authenticated/services/darkweb'
    | '/_authenticated/services/email'
    | '/_authenticated/services/government'
    | '/_authenticated/services/image'
    | '/_authenticated/services/news'
    | '/_authenticated/services/social'
    | '/_authenticated/services/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/services': {
      id: '/_authenticated/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof AuthenticatedServicesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/services/': {
      id: '/_authenticated/services/'
      path: '/'
      fullPath: '/services/'
      preLoaderRoute: typeof AuthenticatedServicesIndexRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
    '/_authenticated/services/social': {
      id: '/_authenticated/services/social'
      path: '/social'
      fullPath: '/services/social'
      preLoaderRoute: typeof AuthenticatedServicesSocialRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
    '/_authenticated/services/news': {
      id: '/_authenticated/services/news'
      path: '/news'
      fullPath: '/services/news'
      preLoaderRoute: typeof AuthenticatedServicesNewsRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
    '/_authenticated/services/image': {
      id: '/_authenticated/services/image'
      path: '/image'
      fullPath: '/services/image'
      preLoaderRoute: typeof AuthenticatedServicesImageRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
    '/_authenticated/services/government': {
      id: '/_authenticated/services/government'
      path: '/government'
      fullPath: '/services/government'
      preLoaderRoute: typeof AuthenticatedServicesGovernmentRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
    '/_authenticated/services/email': {
      id: '/_authenticated/services/email'
      path: '/email'
      fullPath: '/services/email'
      preLoaderRoute: typeof AuthenticatedServicesEmailRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
    '/_authenticated/services/darkweb': {
      id: '/_authenticated/services/darkweb'
      path: '/darkweb'
      fullPath: '/services/darkweb'
      preLoaderRoute: typeof AuthenticatedServicesDarkwebRouteImport
      parentRoute: typeof AuthenticatedServicesRoute
    }
  }
}

interface AuthenticatedServicesRouteChildren {
  AuthenticatedServicesDarkwebRoute: typeof AuthenticatedServicesDarkwebRoute
  AuthenticatedServicesEmailRoute: typeof AuthenticatedServicesEmailRoute
  AuthenticatedServicesGovernmentRoute: typeof AuthenticatedServicesGovernmentRoute
  AuthenticatedServicesImageRoute: typeof AuthenticatedServicesImageRoute
  AuthenticatedServicesNewsRoute: typeof AuthenticatedServicesNewsRoute
  AuthenticatedServicesSocialRoute: typeof AuthenticatedServicesSocialRoute
  AuthenticatedServicesIndexRoute: typeof AuthenticatedServicesIndexRoute
}

const AuthenticatedServicesRouteChildren: AuthenticatedServicesRouteChildren = {
  AuthenticatedServicesDarkwebRoute: AuthenticatedServicesDarkwebRoute,
  AuthenticatedServicesEmailRoute: AuthenticatedServicesEmailRoute,
  AuthenticatedServicesGovernmentRoute: AuthenticatedServicesGovernmentRoute,
  AuthenticatedServicesImageRoute: AuthenticatedServicesImageRoute,
  AuthenticatedServicesNewsRoute: AuthenticatedServicesNewsRoute,
  AuthenticatedServicesSocialRoute: AuthenticatedServicesSocialRoute,
  AuthenticatedServicesIndexRoute: AuthenticatedServicesIndexRoute,
}

const AuthenticatedServicesRouteWithChildren =
  AuthenticatedServicesRoute._addFileChildren(
    AuthenticatedServicesRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedServicesRoute: typeof AuthenticatedServicesRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedServicesRoute: AuthenticatedServicesRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
